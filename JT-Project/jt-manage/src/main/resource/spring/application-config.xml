<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<!-- 1.配置包扫描 -->
	<context:component-scan base-package="com.jt"/>
	
	<!-- 2.加载properties 的配置文件 -->
	<!-- 第一个方法  <util:property-path path="" id=""/> 
		#{集合id.value}
			1.先从容器中获取集合，再从集合中取值
			2.当properties中的key中带有"."的时候,
			取值#{集合id.user.name(key)}会报错(不认识两个点) -->
			
	<context:property-placeholder location="classpath:/properties/*.properties"/>
	
    <!-- 3.配置druid 数据源		 ${key}（从容器中取值）-->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
	</bean>
	
	
	
	
	<!-- 3.1  配置注解写法，只要是更新操作，添加注解 -->
	<tx:annotation-driven/>
	<!-- 3.2 声明式事物的写法，需要提前定义事务控制策略 -->
	<!-- 3.2.1  配置事务管理器（真正的实现事务提交/回滚） -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="DataSource" ref="dataSource"/>
	</bean>
	<!-- 3.2.2  定义事务通知（定义事务策略，那些方法需要事务）
		propagation="REQUIRED"      表示必须添加事务（默认值）
		propagation="REQUIRED_NEW"  表示每次执行方法都会新建事务
		propagation="SUPPORTS"   表示事务支持（方法默认不添加事务，如果该方法执行时之前已经有事务，则合并事务执行） -->
	<tx:advice id="tAdvice">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="update*"/>
			<tx:method name="delete*"/>
			<tx:method name="findAll" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="*" propagation="SUPPORTS" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<!-- 3.2.3 定义事务切面（通知 + 切入点表达式）
		1. AOP中默认代理策略：
			1.1 如果目标对象有接口，默认采用JDK方式创建代理对象
				要求：必须有接口
			1.2 如果目标对象无接口，则采用CGLIB形式创建代理对象
				特点：创建出来的代理对象，都是目标对象的子类 
		2. proxy-target-class="true"  强制使用CGLIB
		3. 1 粗粒度控制：within(包名.类名) 按类匹配
		   2 细粒度控制：方法参数级别
		   execution(返回值类型 包名.类名.方法名.(参数列表))
		-->
	<aop:config>
		<aop:pointcut expression="execution(* com.jt.manage.service..*.*(..))" id="pc"/>
		<aop:advisor advice-ref="tAdvice" pointcut-ref="pc"/>
		
		<!-- 自定义切面  切面类 + 通知
		<aop:aspect ref="自定义的切面类（首字母小写）"></aop:aspect> -->
	</aop:config>
</beans>